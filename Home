    // Init Variables
    var projContainers = document.querySelectorAll(".collection-item");
    var currentMoveAnimId = null;
    var currentOpAnimId = null;

    // Constants
    const moveIncrement = 7;
    const opacityIncrement = 10 / 100;
    const globalTargetOpacity = "0.0";
    const posOffset = 60;
    
    // Ease-In Function
    function easeIn(t) 
    {
        return t * t;
    }

    // Ease-Out Function
    function easeOut(t) 
    {
        return 1 - Math.pow(1 - t, 2);
    }

    function OnLoad()
    {	
        projContainers = document.querySelectorAll(".collection-item");

        const isMobile = $(window).width() <= 768;
        if (isMobile)
        {
            document.addEventListener('touchstart', 
            function HandleDocumentTouchStart(event)
            {
                const touch = event.touches[0];
                
                if (event.touches[0].target != image)
                {
                    resetHorizontal(image, info);
                    setOpacityOnOtherElements(element, "1");
                }
                else 
                {
                    moveHorizontal(image, info, isLeft);
                    setOpacityOnOtherElements(element, globalTargetOpacity);
                }

            }, false);
        }

        projContainers.forEach(function (element) 
        {
            if (element) 
            {
                console.log(element);
                const image = element.querySelector(".project-image");
                const info = element.querySelector(".project-information");
                const imageRect = image.getBoundingClientRect();
                const imageLeft = imageRect.left;
                const isLeft = imageLeft < window.innerWidth / 2 ? true : false;
                
                if (isMobile)
                {
                    document.addEventListener('touchstart', 
                    function HandleDocumentTouchStart(event)
                    {
                        const touch = event.touches[0];
                        
                        if (event.touches[0].target != image)
                        {
                            resetHorizontal(image, info);
                            setOpacityOnOtherElements(element, "1");
                        }
                        else 
                        {
                            moveHorizontal(image, info, isLeft);
                            setOpacityOnOtherElements(element, globalTargetOpacity);
                        }

                    }, false);
                }
                else 
                {
                    info.onmouseenter = function () 
                    {
                        moveHorizontal(image, info, isLeft);
                        setOpacityOnOtherElements(element, globalTargetOpacity);
                    };
                    info.onmouseleave = function () 
                    {
                        resetHorizontal(image, info);
                        setOpacityOnOtherElements(element, "1");
                    };
                }
            }
        });
    }

   function setOpacityOnOtherElements(element, targetOpacity) 
   {
        $(projContainers).not(element).stop().animate(
            { opacity: targetOpacity },
            {
                duration: 300,
                step: function (now, fx) {
                    if (fx.prop === "opacity") {
                        $(this).css("opacity", now);
                    }
                },
                queue: false
            }
        );
    }

    function resetHorizontal(image, info) 
    {
        clearInterval(currentMoveAnimId);

        // start animation
        var pos = parseFloat(image.style.left);
        var opacity = parseFloat(info.style.opacity);

        const resetAnimId = setInterval(frame, 5);
        const projectButton = info.querySelector(":scope > .project-page-button");
        const resetDirection = pos >= 0 ? 1 : -1; // Adjust the reset direction based on the original movement
        
        function frame() 
        {
            if ((resetDirection === 1 && pos <= 0 && opacity < 0) || (resetDirection === -1 && pos >= 0 && opacity < 0)) 
            {
                image.style.zIndex = "auto";
                image.style.left = 0;
                projectButton.style.display = "none";
                clearInterval(resetAnimId);
            } 
            else 
            {
                pos -= resetDirection * moveIncrement;
                opacity -= opacityIncrement;

                image.style.left = pos + "px";
                info.style.opacity = opacity + "";
            }
        }
    }

   function moveHorizontal(image, info, isLeft) 
   {
        // instant
        image.style.zIndex = "10";
        clearInterval(currentMoveAnimId);

        // start animation
        currentMoveAnimId = setInterval(frame, 5);
        const width = image.clientWidth;
        const projectButton = info.querySelector(":scope > .project-page-button");
        
        var pos = 0;
        function frame() 
        {
            if (pos >= width) 
            {
                projectButton.style.display = "block";
                clearInterval(currentMoveAnimId);
            } 
            else 
            {
                var t = pos / width; // Normalized time
                t = easeOut(t);

                if (isLeft) 
                {
                    image.style.left = t * width + "px";
                } 
                else 
                {
                    image.style.left = -t * width + "px";
                }

                info.style.opacity = t;
                pos += moveIncrement; // Adjust the moveIncrement as needed
            }
        }
    }